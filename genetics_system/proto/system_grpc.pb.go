// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package genetics_system

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SystemServiceClient is the client API for SystemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemServiceClient interface {
	GetSystems(ctx context.Context, in *GetSystemsRequest, opts ...grpc.CallOption) (*GetSystemsResponse, error)
	GetSystem(ctx context.Context, in *GetSystemRequest, opts ...grpc.CallOption) (*GetSystemResponse, error)
	CreateSystem(ctx context.Context, in *CreateSystemRequest, opts ...grpc.CallOption) (*CreateSystemResponse, error)
	UpdateSystem(ctx context.Context, in *UpdateSystemRequest, opts ...grpc.CallOption) (*UpdateSystemResponse, error)
	DeleteSystem(ctx context.Context, in *DeleteSystemRequest, opts ...grpc.CallOption) (*DeleteSystemResponse, error)
}

type systemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemServiceClient(cc grpc.ClientConnInterface) SystemServiceClient {
	return &systemServiceClient{cc}
}

func (c *systemServiceClient) GetSystems(ctx context.Context, in *GetSystemsRequest, opts ...grpc.CallOption) (*GetSystemsResponse, error) {
	out := new(GetSystemsResponse)
	err := c.cc.Invoke(ctx, "/genetics_system.SystemService/GetSystems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) GetSystem(ctx context.Context, in *GetSystemRequest, opts ...grpc.CallOption) (*GetSystemResponse, error) {
	out := new(GetSystemResponse)
	err := c.cc.Invoke(ctx, "/genetics_system.SystemService/GetSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) CreateSystem(ctx context.Context, in *CreateSystemRequest, opts ...grpc.CallOption) (*CreateSystemResponse, error) {
	out := new(CreateSystemResponse)
	err := c.cc.Invoke(ctx, "/genetics_system.SystemService/CreateSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) UpdateSystem(ctx context.Context, in *UpdateSystemRequest, opts ...grpc.CallOption) (*UpdateSystemResponse, error) {
	out := new(UpdateSystemResponse)
	err := c.cc.Invoke(ctx, "/genetics_system.SystemService/UpdateSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) DeleteSystem(ctx context.Context, in *DeleteSystemRequest, opts ...grpc.CallOption) (*DeleteSystemResponse, error) {
	out := new(DeleteSystemResponse)
	err := c.cc.Invoke(ctx, "/genetics_system.SystemService/DeleteSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemServiceServer is the server API for SystemService service.
// All implementations must embed UnimplementedSystemServiceServer
// for forward compatibility
type SystemServiceServer interface {
	GetSystems(context.Context, *GetSystemsRequest) (*GetSystemsResponse, error)
	GetSystem(context.Context, *GetSystemRequest) (*GetSystemResponse, error)
	CreateSystem(context.Context, *CreateSystemRequest) (*CreateSystemResponse, error)
	UpdateSystem(context.Context, *UpdateSystemRequest) (*UpdateSystemResponse, error)
	DeleteSystem(context.Context, *DeleteSystemRequest) (*DeleteSystemResponse, error)
	mustEmbedUnimplementedSystemServiceServer()
}

// UnimplementedSystemServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSystemServiceServer struct {
}

func (UnimplementedSystemServiceServer) GetSystems(context.Context, *GetSystemsRequest) (*GetSystemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystems not implemented")
}
func (UnimplementedSystemServiceServer) GetSystem(context.Context, *GetSystemRequest) (*GetSystemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystem not implemented")
}
func (UnimplementedSystemServiceServer) CreateSystem(context.Context, *CreateSystemRequest) (*CreateSystemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSystem not implemented")
}
func (UnimplementedSystemServiceServer) UpdateSystem(context.Context, *UpdateSystemRequest) (*UpdateSystemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSystem not implemented")
}
func (UnimplementedSystemServiceServer) DeleteSystem(context.Context, *DeleteSystemRequest) (*DeleteSystemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSystem not implemented")
}
func (UnimplementedSystemServiceServer) mustEmbedUnimplementedSystemServiceServer() {}

// UnsafeSystemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemServiceServer will
// result in compilation errors.
type UnsafeSystemServiceServer interface {
	mustEmbedUnimplementedSystemServiceServer()
}

func RegisterSystemServiceServer(s grpc.ServiceRegistrar, srv SystemServiceServer) {
	s.RegisterService(&SystemService_ServiceDesc, srv)
}

func _SystemService_GetSystems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetSystems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genetics_system.SystemService/GetSystems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetSystems(ctx, req.(*GetSystemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_GetSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genetics_system.SystemService/GetSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetSystem(ctx, req.(*GetSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_CreateSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).CreateSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genetics_system.SystemService/CreateSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).CreateSystem(ctx, req.(*CreateSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_UpdateSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).UpdateSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genetics_system.SystemService/UpdateSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).UpdateSystem(ctx, req.(*UpdateSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_DeleteSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).DeleteSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genetics_system.SystemService/DeleteSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).DeleteSystem(ctx, req.(*DeleteSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SystemService_ServiceDesc is the grpc.ServiceDesc for SystemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SystemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "genetics_system.SystemService",
	HandlerType: (*SystemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSystems",
			Handler:    _SystemService_GetSystems_Handler,
		},
		{
			MethodName: "GetSystem",
			Handler:    _SystemService_GetSystem_Handler,
		},
		{
			MethodName: "CreateSystem",
			Handler:    _SystemService_CreateSystem_Handler,
		},
		{
			MethodName: "UpdateSystem",
			Handler:    _SystemService_UpdateSystem_Handler,
		},
		{
			MethodName: "DeleteSystem",
			Handler:    _SystemService_DeleteSystem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "system.proto",
}
